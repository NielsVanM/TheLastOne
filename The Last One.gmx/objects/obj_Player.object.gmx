<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_Player_Down</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Variables
//Movement
normalMoveSpeed = 2;
runMoveSpeed = 4;
crouchMoveSpeed = 1;
hSpeed = 0;
vSpeed = 0;
normalImgSpeed = 0.2;
runImgSpeed = 0.4;
crouchImgSpeed = 0.1;
verticalLock = false;
horizontalLock = false;

//Water, Food ,Health, Stamina
pWater = 100;
pFood = 100;
pHealth = 100;
pStamina = 100;
pWaterDecay = 0.3; //Per second
pFoodDecay = 0.3; //Per Second
pStaminaDecay = 26 / room_speed; //Per second
pWaterDamage = 1; //Per Second
pFoodDamage = 1; //Per Second

testHealth = 100;

//Inventory System
invSelected = 0;
invExtended = false;

invArray[0] = 0;
invArray[1] = 0;
invArray[2] = 0;
invArray[3] = 0;
invArray[4] = 0;

invSlot[0] = 1;
invSlot[1] = 2;
invSlot[2] = 3;
invSlot[3] = 4;

//Console
global.console = "";
global.console_Selected = false
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create light
instance_create(x,y,obj_FlashLight);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Movement
//For menu
if (global.pause = true){
    image_speed = 0; 
    exit;
}

//User input
keyRight = keyboard_check(ord('D'));
keyLeft = -keyboard_check(ord('A'));
keyUp = -keyboard_check(ord('W'));
keyDown = keyboard_check(ord('S'));
keySprint = keyboard_check(vk_shift);
global.keySneak = keyboard_check(vk_control);

//Sprinting &amp; sneaking mechanism
moveSpeed = normalMoveSpeed;
imgSpeed = normalImgSpeed;

if (keySprint = 1 &amp;&amp; pStamina &gt; 0){
    moveSpeed = runMoveSpeed; 
    imgSpeed = runImgSpeed;
}

if (global.keySneak = 1){
    moveSpeed = crouchMoveSpeed; 
    imgSpeed = crouchImgSpeed;
}

//Calculating movement
hMove = keyLeft + keyRight;
vMove = keyUp + keyDown;
hSpeed = hMove * moveSpeed;
vSpeed = vMove * moveSpeed;

//Setting ismoving variable
if (hSpeed != 0 || vSpeed != 0){
    isMoving = true; 
}else{
    isMoving = false;
}

//Setting the image speed and the Image index
if (hMove == 0 &amp;&amp; vMove == 0){
    image_speed = 0; 
    image_index = 1;
}

//Locking Verical Movement &amp; changing Sprites
if (horizontalLock = false){
    if (hMove = 1 || hMove = -1){ 
        image_speed = imgSpeed;
        verticalLock = true;
        
        if (hMove = 1){ 
            //Right
            sprite_index = spr_Player_Right;
            global.faceDirection = 0;
            
            if (hMove = -1){ 
                //Lock speed
                hSpeed = 0;
            }
            
            if (vMove = 1){ 
                //Moving down &amp; Player sprite down &amp;  Set face direction down &amp; Horizontal speed 0
                sprite_index = spr_Player_Down;
                global.faceDirection = 270;
                vSpeed = vMove * moveSpeed;
                hSpeed = 0;
            }
            
            if (vMove = -1){ 
                //Moving up &amp; Player sprite up &amp;  Set face direction up &amp; Horizontal speed 0
                sprite_index = spr_Player_Up;
                global.faceDirection = 90;
                vSpeed = vMove * moveSpeed;
                hSpeed = 0;
            }
        }
        
        if (hMove = -1){ 
            //Left
            sprite_index = spr_Player_Left;
            global.faceDirection = 180;
        
            if (hMove = 1){ 
                //Lock speed
                hSpeed = 0;
            }
                        
            if (vMove = 1){ 
                //Moving down &amp; Player sprite down &amp;  Set face direction down &amp; Horizontal speed 0
                sprite_index = spr_Player_Down;
                global.faceDirection = 270;
                vSpeed = vMove * moveSpeed;
                hSpeed = 0;
            }
            
            if (vMove = -1){ 
                //Moving up &amp; Player sprite up &amp;  Set face direction up &amp; Horizontal speed 0
                sprite_index = spr_Player_Up;
                global.faceDirection = 90;
                vSpeed = vMove * moveSpeed;
                hSpeed = 0;
            }
        }
    }else{
        verticalLock = false;
    }
}

//Locking Horizontal Movement &amp; changing Sprites
if (verticalLock = false){
    if (vMove = 1 || vMove = -1){
        image_speed = imgSpeed;
        horizontalLock = true;
        
        if (vMove = 1){ 
            //Down
            sprite_index = spr_Player_Down;
            global.faceDirection = 270;
        
            if (vMove = -1){ 
                //Lock speed
                vSpeed = 0;
            }
                        
            if (hMove = 1){ 
                //Moving right &amp; Player sprite right &amp;  Set face direction right &amp; Vertical speed 0
                sprite_index = spr_Player_Right;
                global.faceDirection = 0;
                hSpeed = hMove * moveSpeed;
                vSpeed = 0;
            }
            
            if (hMove = -1){ 
                //Moving left &amp; Player sprite left &amp;  Set face direction left &amp; Vertical speed 0
                sprite_index = spr_Player_Left;
                global.faceDirection = 180;
                hSpeed = hMove * moveSpeed;
                vSpeed = 0;
            }
        }
        
        if (vMove = -1){
            //Up
            sprite_index = spr_Player_Up;
            global.faceDirection = 90;
        
            if (vMove = 1){ 
                //Lock speed
                vSpeed = 0;
            }
                        
            if (hMove = 1){ 
                //Moving right &amp; Player sprite right &amp;  Set face direction right &amp; Vertical speed 0
                sprite_index = spr_Player_Right;
                global.faceDirection = 0;
                hSpeed = hMove * moveSpeed;
                vSpeed = 0;
            }
            
            if (hMove = -1){ 
                //Moving left &amp; Player sprite left &amp;  Set face direction left &amp; Vertical speed 0
                sprite_index = spr_Player_Left;
                global.faceDirection = 180;
                hSpeed = hMove * moveSpeed;
                vSpeed = 0;
            }   
        }
    }else{
        horizontalLock = false
    }
}

//Horizontal collision
if (place_meeting(x + hSpeed, y, obj_Collision)){
    while (!place_meeting(x + sign(hSpeed), y, obj_Collision)){
        x += sign(hSpeed);
    }
    hSpeed = 0;
}
//Vertical collision
if (place_meeting(x, y + vSpeed, obj_Collision)){
    while (!place_meeting(x,y+sign(vSpeed),obj_Collision)){
        y += sign(vSpeed);
    }
    vSpeed = 0;
}

//Changing x and y
x += hSpeed;
y += vSpeed;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Water, Food, Health, Stamina

//For pause menu
if (global.pause = true){exit;}
//Health
//Hurt by water and food
if (pWater = 0){pHealth -= pWaterDamage / room_speed;}
if (pFood = 0){pHealth -= pFoodDamage / room_speed;}

//Death
if (pHealth &lt;= 0){/*Death animation*/}


//Water
//Water decay
pWater -= pWaterDecay / room_speed;
//Value is always between 0 - 100
if (pWater &gt; 100){pWater = 100;}
if (pWater &lt; 0){pWater = 0;}

//Food
//Food decay
pFood -= pFoodDecay / room_speed;
//Value is always between 0 - 100
if (pFood &gt; 100){pFood = 100;}
if (pFood &lt; 0){pFood = 0;}

//Stamina
if (pStamina &gt; 100){pStamina = 100;}
if (pStamina &lt; 0){pStamina = 0;}
if (keyboard_check(vk_shift) &amp;&amp; pStamina &gt; 0 &amp;&amp; isMoving = true){
    pStamina -= pStaminaDecay;
}
else if (!keyboard_check(vk_shift)){
    pStamina += 3 / room_speed;
}

////////DEBUG
if (global.debug = true){pStamina = 100;}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Inventory System

//Check if tab is pressed
if (keyboard_check(vk_tab)){invExtended = true}else{invExtended = false;}

//Scroll up/down
if (invExtended = false){
    if (mouse_wheel_up()){invSelected -= 1;}
    if (mouse_wheel_down()){invSelected += 1;}
}

//Max scroll up/down
if (invSelected &gt; 5){invSelected = 5;}
if (invSelected &lt; 0){invSelected = 0;}

//Extenden inventory when pressing tab
if (invExtended = true){
    //First array
    if (invSelected = 0){
        //Select in array
        if (mouse_wheel_up()){invArray[0] -= 1;}
        if (mouse_wheel_down()){invArray[0] += 1;}
        
        //Max selection
        if (invArray[0] &gt; 2){invArray[0] = 2;}
        if (invArray[0] &lt; 0){invArray[0] = 0;}
    }
    //Second array
    if (invSelected = 1){
        //Select in array
        if (mouse_wheel_up()){invArray[1] -= 1;}
        if (mouse_wheel_down()){invArray[1] += 1;}
        
        //Max selection
        if (invArray[1] &gt; 2){invArray[1] = 2;}
        if (invArray[1] &lt; 0){invArray[1] = 0;}
    }
    //Third array
    if (invSelected = 2){
        //Select in array
        if (mouse_wheel_up()){invArray[2] -= 1;}
        if (mouse_wheel_down()){invArray[2] += 1;}
        
        //Max selection
        if (invArray[2] &gt; 2){invArray[2] = 2;}
        if (invArray[2] &lt; 0){invArray[2] = 0;}
    }
    //Fourth array
    if (invSelected = 3){
        //Select in array
        if (mouse_wheel_up()){invArray[3] -= 1;}
        if (mouse_wheel_down()){invArray[3] += 1;}
        
        //Max selection
        if (invArray[3] &gt; 2){invArray[3] = 2;}
        if (invArray[3] &lt; 0){invArray[3] = 0;}
    }
    //Fith array
    if (invSelected = 4){
        //Select in array
        if (mouse_wheel_up()){invArray[4] -= 1;}
        if (mouse_wheel_down()){invArray[4] += 1;}
        
        //Max selection
        if (invArray[4] &gt; 2){invArray[4] = 2;}
        if (invArray[4] &lt; 0){invArray[4] = 0;}
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Depth correction
depth = y * -1;
if (mouse_check_button_pressed(mb_left)){pHealth -= 5;}
if (mouse_check_button_pressed(mb_right)){pHealth += 5;}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Console

//User input
keySlash = keyboard_check(ord('C'));
keyEnter = keyboard_check(vk_enter);

//Check for backslash
if (keySlash = 1) {
    keyboard_string = global.console;
    global.console_Selected = true;
}

//something
if (global.console_Selected = true) {
    global.console = keyboard_string;
}

//Check for enter
if (keyEnter = 1) {
    if (global.console_Selected = true) {
        if (global.console = "/test") {
            global.console = "Valid command";
        }
        global.console_Selected = false;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///GUI/HUD

//User input
cMain = 0

///Health, water, food, stamina
//Draw player sprite
draw_sprite_ext(spr_Player_Down,1,160,900,5,5,0,c_red,1);

//Healthbar
testHealth = 100
while (cMain &lt;= 32){
    if (pHealth &gt; testHealth){
        draw_sprite_part_ext(spr_Player_Down, 1, 0, 0, sprite_width, sprite_height-cMain+1, 79, 820, 5, 5, c_white, 1);
    }
    testHealth -= 3.125;
    cMain += 1;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Inventory
//Draw Main Inventory
//Draw slots
draw_sprite_ext(spr_InvSlot,0,1888-32,540-256,2,2,0,c_white,1);
draw_sprite_ext(spr_InvSlot,0,1888-32,540-128,2,2,0,c_white,1);
draw_sprite_ext(spr_InvSlot,0,1888-32,540,2,2,0,c_white,1);
draw_sprite_ext(spr_InvSlot,0,1888-32,540+128,2,2,0,c_white,1);
draw_sprite_ext(spr_InvSlot,0,1888-32,540+256,2,2,0,c_white,1);

//Draw feedback for slots
if (invSelected = 0){
    draw_sprite_ext(spr_InvFeedback,0,1888-32,540-256,2,2,0,c_white,1);
}
if (invSelected = 1){
    draw_sprite_ext(spr_InvFeedback,0,1888-32,540-128,2,2,0,c_white,1);
}
if (invSelected = 2){
    draw_sprite_ext(spr_InvFeedback,0,1888-32,540,2,2,0,c_white,1);
}
if (invSelected = 3){
    draw_sprite_ext(spr_InvFeedback,0,1888-32,540+128,2,2,0,c_white,1);
}
if (invSelected = 4){
    draw_sprite_ext(spr_InvFeedback,0,1888-32,540+256,2,2,0,c_white,1);
}

//Draw arrays
if (invExtended = true){
    //Draw first array
    if (invSelected = 0){
        //Draw slots
        draw_sprite_ext(spr_InvSlot,0,1888-32-128,540-256,2,2,0,c_white,1);
        draw_sprite_ext(spr_InvSlot,0,1888-32-256,540-256,2,2,0,c_white,1);
        draw_sprite_ext(spr_InvSlot,0,1888-32-384,540-256,2,2,0,c_white,1);
        
        //Draw feedback
        if (invArray[0] = 0){
            draw_sprite_ext(spr_InvFeedback2,0,1888-32-384,540-256,2,2,0,c_white,1);
        }
        if (invArray[0] = 1){
            draw_sprite_ext(spr_InvFeedback2,0,1888-32-256,540-256,2,2,0,c_white,1);;
        }
        if (invArray[0] = 2){
            draw_sprite_ext(spr_InvFeedback2,0,1888-32-128,540-256,2,2,0,c_white,1);;
        }
    }
    //Draw second array
    if (invSelected = 1){
        //Draw slots
        draw_sprite_ext(spr_InvSlot,0,1888-32-128,540-128,2,2,0,c_white,1);
        draw_sprite_ext(spr_InvSlot,0,1888-32-256,540-128,2,2,0,c_white,1);
        draw_sprite_ext(spr_InvSlot,0,1888-32-384,540-128,2,2,0,c_white,1);
        
        //Draw feedback
        if (invArray[1] = 0){
            draw_sprite_ext(spr_InvFeedback2,0,1888-32-384,540-128,2,2,0,c_white,1);
        }
        if (invArray[1] = 1){
            draw_sprite_ext(spr_InvFeedback2,0,1888-32-256,540-128,2,2,0,c_white,1);
        }
        if (invArray[1] = 2){
            draw_sprite_ext(spr_InvFeedback2,0,1888-32-128,540-128,2,2,0,c_white,1);
        }
    }
    //Draw third array
    if (invSelected = 2){
        //Draw slots
        draw_sprite_ext(spr_InvSlot,0,1888-32-128,540,2,2,0,c_white,1);
        draw_sprite_ext(spr_InvSlot,0,1888-32-256,540,2,2,0,c_white,1);
        draw_sprite_ext(spr_InvSlot,0,1888-32-384,540,2,2,0,c_white,1);
        
        //Draw feedback
        if (invArray[2] = 0){
            draw_sprite_ext(spr_InvFeedback2,0,1888-32-384,540,2,2,0,c_white,1);
        }
        if (invArray[2] = 1){
            draw_sprite_ext(spr_InvFeedback2,0,1888-32-256,540,2,2,0,c_white,1);
        }
        if (invArray[2] = 2){
            draw_sprite_ext(spr_InvFeedback2,0,1888-32-128,540,2,2,0,c_white,1);
        }
    }
    //Draw fourth array
    if (invSelected = 3){
        //Draw slots
        draw_sprite_ext(spr_InvSlot,0,1888-32-128,540+128,2,2,0,c_white,1);
        draw_sprite_ext(spr_InvSlot,0,1888-32-256,540+128,2,2,0,c_white,1);
        draw_sprite_ext(spr_InvSlot,0,1888-32-384,540+128,2,2,0,c_white,1);
        
        //Draw feedback
        if (invArray[3] = 0){
            draw_sprite_ext(spr_InvFeedback2,0,1888-32-384,540+128,2,2,0,c_white,1);
        }
        if (invArray[3] = 1){
            draw_sprite_ext(spr_InvFeedback2,0,1888-32-256,540+128,2,2,0,c_white,1);
        }
        if (invArray[3] = 2){
            draw_sprite_ext(spr_InvFeedback2,0,1888-32-128,540+128,2,2,0,c_white,1);
        }
    }
    //Draw fith array
    if (invSelected = 4){
        //Draw slots
        draw_sprite_ext(spr_InvSlot,0,1888-32-128,540+256,2,2,0,c_white,1);
        draw_sprite_ext(spr_InvSlot,0,1888-32-256,540+256,2,2,0,c_white,1);
        draw_sprite_ext(spr_InvSlot,0,1888-32-384,540+256,2,2,0,c_white,1);
        
        //Draw feedback
        if (invArray[4] = 0){
            draw_sprite_ext(spr_InvFeedback2,0,1888-32-384,540+256,2,2,0,c_white,1);
        }
        if (invArray[4] = 1){
            draw_sprite_ext(spr_InvFeedback2,0,1888-32-256,540+256,2,2,0,c_white,1);
        }
        if (invArray[4] = 2){
            draw_sprite_ext(spr_InvFeedback2,0,1888-32-128,540+256,2,2,0,c_white,1);
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw player
if (global.hide = false){draw_self();}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///DEBUG DELETE WHEN COMPILING
draw_set_font(fnt_Instructions);
if (global.debug = true){
    draw_text(x,y+10,x);
    draw_text(x,y+20,y);
    draw_text(x,y+30,pWater);
    draw_text(x,y+40,pFood);
    draw_text(x,y+50,pHealth);
    draw_text(x,y+60,pStamina);
    draw_text(x,y+70,global.flashLightBattery);
    draw_text(x,y+80,global.size);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw console
draw_text(x,y+20,global.console);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>16,16</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>

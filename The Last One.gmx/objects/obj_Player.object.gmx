<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_Player_Down</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Variables
//Global variables
global.hide = false;
global.faceDirection = 270;

//Movement
normalMoveSpeed = 2;
runMoveSpeed = 4;
crouchMoveSpeed = 1;
hSpeed = 0;
vSpeed = 0;
normalImgSpeed = 0.2;
runImgSpeed = 0.4;
crouchImgSpeed = 0.1;
verticalLock = false;
horizontalLock = false;

//Water, Food ,Health, Stamina
pWater = 100;
pFood = 100;
pHealth = 100;
pStamina = 100;
pWaterDecay = 0.3; //Per second
pFoodDecay = 0.3; //Per Second
pStaminaDecay = 26 / room_speed; //Per second
pWaterDamage = 1; //Per Second
pFoodDamage = 1; //Per Second

testHealth = 100;

//Inventory System
invSelected = 0;
invExtended = false;
pickupRange = 16;
bottleFillRange = 32;

invArraySelected[0] = 0;
invArraySelected[1] = 0;
invArraySelected[2] = 0;
invArraySelected[3] = 0;
invArraySelected[4] = 0;

invAmount[0,1] = 0; 
invAmount[0,2] = 0;
invAmount[0,3] = 0;
invAmount[0,4] = 0;
invAmount[1,1] = 0;
invAmount[1,2] = 0;
invAmount[2,1] = 0;
invAmount[2,2] = 0;
invAmount[2,3] = 0;

//Guns
bulletDelay = 0;
reloadTime = 0;

//Handgun
gun[1,1] = 12; //Max clip size
gun[1,2] = 60; //Max ammo
gun[1,3] = 0.5; //Bullet delay
gun[1,4] = 1; //Reload time
gun[1,5] = 0; //Ammo in magazine
gun[1,6] = 0; //Total ammo
gun[1,7] = 8; //Horizontal offset inpixels
gun[1,8] = 7; //Vertical offset inpixels
gun[1,9] = 30; //Damage the weapon does
gun[5,1] = false; //If gun is unlocked

//Shotgun
gun[2,1] = 4;
gun[2,2] = 12;
gun[2,3] = 0.7;
gun[2,4] = 3;
gun[2,5] = 0;
gun[2,6] = 0;
gun[2,7] = 12;
gun[2,8] = 12;
gun[2,9] = 101;
gun[6,1] = false;

//AK47
gun[3,1] = 30;
gun[3,2] = 120;
gun[3,3] = 0.1;
gun[3,4] = 1;
gun[3,5] = 0;
gun[3,6] = 0;
gun[3,7] = 12;
gun[3,8] = 12;
gun[3,9] = 20;
gun[7,1] = false;

//LMG
gun[4,1] = 100;
gun[4,2] = 300;
gun[4,3] = 0.05;
gun[4,4] = 5;
gun[4,5] = 0;
gun[4,6] = 0;
gun[4,7] = 12;
gun[4,8] = 12;
gun[4,9] = 10;
gun[8,1] = false;

//Melee
hitRange = 32;
hitDelay = 0;

//FireAxe
melee[1,1] = false; //Unlocked
melee[1,2] = 100; //Damage
melee[1,3] = 1; //Swing time in seconds

//Crowbar
melee[2,1] = false;
melee[2,2] = 40;
melee[2,3] = 0.5;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create light
instance_create(x,y,obj_FlashLight);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Movement
//For menu
if (global.pause = true){
    image_speed = 0; 
    exit;
}

//User input
keyRight = keyboard_check(ord('D'));
keyLeft = -keyboard_check(ord('A'));
keyUp = -keyboard_check(ord('W'));
keyDown = keyboard_check(ord('S'));
keySprint = keyboard_check(vk_shift);
global.keySneak = keyboard_check(vk_control);

//Sprinting &amp; sneaking mechanism
moveSpeed = normalMoveSpeed;
imgSpeed = normalImgSpeed;

if (keySprint = 1 &amp;&amp; pStamina &gt; 0){
    moveSpeed = runMoveSpeed; 
    imgSpeed = runImgSpeed;
}

if (global.keySneak = 1){
    moveSpeed = crouchMoveSpeed; 
    imgSpeed = crouchImgSpeed;
}

//Calculating movement
hMove = keyLeft + keyRight;
vMove = keyUp + keyDown;
hSpeed = hMove * moveSpeed;
vSpeed = vMove * moveSpeed;

//Setting ismoving variable
if (hSpeed != 0 || vSpeed != 0){
    isMoving = true; 
}else{
    isMoving = false;
}

//Setting the image speed and the Image index
if (hMove == 0 &amp;&amp; vMove == 0){
    image_speed = 0; 
    image_index = 1;
}

//Locking Verical Movement &amp; changing Sprites
if (horizontalLock = false){
    if (hMove = 1 || hMove = -1){ 
        image_speed = imgSpeed;
        verticalLock = true;
        
        if (hMove = 1){ 
            //Right
            sprite_index = spr_Player_Right;
            global.faceDirection = 0;
            
            if (hMove = -1){ 
                //Lock speed
                hSpeed = 0;
            }
            
            if (vMove = 1){ 
                //Moving down &amp; Player sprite down &amp;  Set face direction down &amp; Horizontal speed 0
                sprite_index = spr_Player_Down;
                global.faceDirection = 270;
                vSpeed = vMove * moveSpeed;
                hSpeed = 0;
            }
            
            if (vMove = -1){ 
                //Moving up &amp; Player sprite up &amp;  Set face direction up &amp; Horizontal speed 0
                sprite_index = spr_Player_Up;
                global.faceDirection = 90;
                vSpeed = vMove * moveSpeed;
                hSpeed = 0;
            }
        }
        
        if (hMove = -1){ 
            //Left
            sprite_index = spr_Player_Left;
            global.faceDirection = 180;
        
            if (hMove = 1){ 
                //Lock speed
                hSpeed = 0;
            }
                        
            if (vMove = 1){ 
                //Moving down &amp; Player sprite down &amp;  Set face direction down &amp; Horizontal speed 0
                sprite_index = spr_Player_Down;
                global.faceDirection = 270;
                vSpeed = vMove * moveSpeed;
                hSpeed = 0;
            }
            
            if (vMove = -1){ 
                //Moving up &amp; Player sprite up &amp;  Set face direction up &amp; Horizontal speed 0
                sprite_index = spr_Player_Up;
                global.faceDirection = 90;
                vSpeed = vMove * moveSpeed;
                hSpeed = 0;
            }
        }
    }else{
        verticalLock = false;
    }
}

//Locking Horizontal Movement &amp; changing Sprites
if (verticalLock = false){
    if (vMove = 1 || vMove = -1){
        image_speed = imgSpeed;
        horizontalLock = true;
        
        if (vMove = 1){ 
            //Down
            sprite_index = spr_Player_Down;
            global.faceDirection = 270;
        
            if (vMove = -1){ 
                //Lock speed
                vSpeed = 0;
            }
                        
            if (hMove = 1){ 
                //Moving right &amp; Player sprite right &amp;  Set face direction right &amp; Vertical speed 0
                sprite_index = spr_Player_Right;
                global.faceDirection = 0;
                hSpeed = hMove * moveSpeed;
                vSpeed = 0;
            }
            
            if (hMove = -1){ 
                //Moving left &amp; Player sprite left &amp;  Set face direction left &amp; Vertical speed 0
                sprite_index = spr_Player_Left;
                global.faceDirection = 180;
                hSpeed = hMove * moveSpeed;
                vSpeed = 0;
            }
        }
        
        if (vMove = -1){
            //Up
            sprite_index = spr_Player_Up;
            global.faceDirection = 90;
        
            if (vMove = 1){ 
                //Lock speed
                vSpeed = 0;
            }
                        
            if (hMove = 1){ 
                //Moving right &amp; Player sprite right &amp;  Set face direction right &amp; Vertical speed 0
                sprite_index = spr_Player_Right;
                global.faceDirection = 0;
                hSpeed = hMove * moveSpeed;
                vSpeed = 0;
            }
            
            if (hMove = -1){ 
                //Moving left &amp; Player sprite left &amp;  Set face direction left &amp; Vertical speed 0
                sprite_index = spr_Player_Left;
                global.faceDirection = 180;
                hSpeed = hMove * moveSpeed;
                vSpeed = 0;
            }   
        }
    }else{
        horizontalLock = false
    }
}

//Horizontal collision
if (place_meeting(x + hSpeed, y, obj_Collision)){
    while (!place_meeting(x + sign(hSpeed), y, obj_Collision)){
        x += sign(hSpeed);
    }
    hSpeed = 0;
}
//Vertical collision
if (place_meeting(x, y + vSpeed, obj_Collision)){
    while (!place_meeting(x,y+sign(vSpeed),obj_Collision)){
        y += sign(vSpeed);
    }
    vSpeed = 0;
}

//Changing x and y
x += hSpeed;
y += vSpeed;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Water, Food, Health, Stamina

//For pause menu
if (global.pause = true){exit;}
//Health
//Hurt by water and food
if (pWater = 0){pHealth -= pWaterDamage / room_speed;}
if (pFood = 0){pHealth -= pFoodDamage / room_speed;}

//Death
if (pHealth &lt;= 0){/*Death animation*/}


//Water
//Water decay
pWater -= pWaterDecay / room_speed;
//Value is always between 0 - 100
if (pWater &gt; 100){pWater = 100;}
if (pWater &lt; 0){pWater = 0;}

//Food
//Food decay
pFood -= pFoodDecay / room_speed;
//Value is always between 0 - 100
if (pFood &gt; 100){pFood = 100;}
if (pFood &lt; 0){pFood = 0;}

//Stamina
if (pStamina &gt; 100){pStamina = 100;}
if (pStamina &lt; 0){pStamina = 0;}
if (keyboard_check(vk_shift) &amp;&amp; pStamina &gt; 0 &amp;&amp; isMoving = true){
    pStamina -= pStaminaDecay;
}
else if (!keyboard_check(vk_shift)){
    pStamina += 3 / room_speed;
}

////////DEBUG
if (global.debug = true){pStamina = 100;}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Inventory System

//Check if tab is pressed
if (keyboard_check(vk_tab)){invExtended = true}else{invExtended = false;}

//Scroll up/down
if (invExtended = false){
    if (mouse_wheel_up()){invSelected -= 1;}
    if (mouse_wheel_down()){invSelected += 1;}
}

//Max scroll up/down
if (invSelected &gt; 4){invSelected = 4;}
if (invSelected &lt; 0){invSelected = 0;}

//Extenden inventory when pressing tab
if (invExtended = true){
    //First array
    if (invSelected = 0){
        //Select in array
        if (mouse_wheel_up()){invArraySelected[0] -= 1;}
        if (mouse_wheel_down()){invArraySelected[0] += 1;}
        
        //Max selection
        if (invArraySelected[0] &gt; 3){invArraySelected[0] = 3;}
        if (invArraySelected[0] &lt; 0){invArraySelected[0] = 0;}
    }
    //Second array
    if (invSelected = 1){
        //Select in array
        if (mouse_wheel_up()){invArraySelected[1] -= 1;}
        if (mouse_wheel_down()){invArraySelected[1] += 1;}
        
        //Max selection
        if (invArraySelected[1] &gt; 1){invArraySelected[1] = 1;}
        if (invArraySelected[1] &lt; 0){invArraySelected[1] = 0;}
    }
    //Third array
    if (invSelected = 2){
        //Select in array
        if (mouse_wheel_up()){invArraySelected[2] -= 1;}
        if (mouse_wheel_down()){invArraySelected[2] += 1;}
        
        //Max selection
        if (invArraySelected[2] &gt; 2){invArraySelected[2] = 2;}
        if (invArraySelected[2] &lt; 0){invArraySelected[2] = 0;}
    }
    //Fourth array
    if (invSelected = 3){
        //Select in array
        if (mouse_wheel_up()){invArraySelected[3] -= 1;}
        if (mouse_wheel_down()){invArraySelected[3] += 1;}
        
        //Max selection
        if (invArraySelected[3] &gt; 3){invArraySelected[3] = 3;}
        if (invArraySelected[3] &lt; 0){invArraySelected[3] = 0;}
    }
    //Fith array
    if (invSelected = 4){
        //Select in array
        if (mouse_wheel_up()){invArraySelected[4] -= 1;}
        if (mouse_wheel_down()){invArraySelected[4] += 1;}
        
        //Max selection
        if (invArraySelected[4] &gt; 1){invArraySelected[4] = 1;}
        if (invArraySelected[4] &lt; 0){invArraySelected[4] = 0;}
    }
}

//Use item that is selected
if (keyboard_check_pressed(ord('E'))){
    //Check wich item is selected
    //Food
    if (invSelected = 0){
        //Orange
        if (invArraySelected[0] = 0) &amp;&amp; (invAmount[0,1] &gt; 0){
            invAmount[0,1] -= 1;
            pFood += 10;
        }
        //Bread
        if (invArraySelected[0] = 1) &amp;&amp; (invAmount[0,2] &gt; 0){
            invAmount[0,2] -= 1;
            pFood += 50;
        }
        //Berries
        if (invArraySelected[0] = 2) &amp;&amp; (invAmount[0,3] &gt; 0){
            invAmount[0,3] -= 1;
            pFood += 10;
        }
        //Apple
        if (invArraySelected[0] = 3) &amp;&amp; (invAmount[0,4] &gt; 0){
            invAmount[0,4] -= 1;
            pFood += 30;
        }
    }
    //Add water
    if (invSelected = 1){
        if (invArraySelected[1] = 1) &amp;&amp; (invAmount[1,2] &gt; 0){
            pWater += 70;
            invAmount[1,1] += 1;
            invAmount[1,2] -= 1;
        }
    }
    if (invSelected = 2){
        //Battery
        if (invArraySelected[2] = 2) &amp;&amp; (invAmount[2,3] &gt; 0){
            global.flashLightBattery += 100;
            invAmount[2,3] -= 1;
        }
    }
}
if (mouse_check_button_pressed(mb_left)){
    //Misc items
    if (invSelected = 2){
        //Grenade
        if (invArraySelected[2] = 0) &amp;&amp; (invAmount[2,1] &gt; 0){
            invAmount[2,1] -= 1;
            action_create_object_motion(obj_PrimedGrenade,x,y,10,global.faceDirection);
        }
        //Landime
        if (invArraySelected[2] = 1) &amp;&amp; (invAmount[2,2] &gt; 0){
            invAmount[2,2] -= 1;
            instance_create(x,y,obj_LandMine);
        }
    }
}

//Pickup Food
if (keyboard_check_pressed(vk_space)){
    //Bread
    if (distance_to_object(obj_Bread) &lt; pickupRange){
        invAmount[0,2] += 1;
        with(obj_Bread){
            if (distance_to_object(obj_Player) &lt; obj_Player.pickupRange){
                instance_destroy();
            }
        }
    }
    //Apples
    if (distance_to_object(obj_Apple) &lt; pickupRange){
        invAmount[0,4] += 1;
        with(obj_Apple){
            if (distance_to_object(obj_Player) &lt; obj_Player.pickupRange){
                instance_destroy();
            }
        }
    }
    //Berries
    if (distance_to_object(obj_Berries) &lt; pickupRange){
        invAmount[0,3] += 1;
        with(obj_Berries){
            if (distance_to_object(obj_Player) &lt; obj_Player.pickupRange){
                instance_destroy();
            }
        }
    }
    //Oranges
    if (distance_to_object(obj_Orange) &lt; pickupRange){
        invAmount[0,1] += 1;
        with(obj_Orange){
            if (distance_to_object(obj_Player) &lt; obj_Player.pickupRange){
                instance_destroy();
            }
        }
    }
}

//Fill bottles
if (keyboard_check_pressed(vk_space)){
    if (distance_to_object(obj_Water2)){
        if (invSelected = 1) &amp;&amp; (invArraySelected[1] = 0){
            if (invAmount[1,1] &gt; 0){
                invAmount[1,1] -= 1;
                invAmount[1,2] += 1;
            }
        }
    }
}

//Pickup misc
//Battery
if (keyboard_check_pressed(vk_space)){
    //Battery
    if (distance_to_object(obj_Battery) &lt; pickupRange){
        invAmount[2,3] += 1;
        with(obj_Battery){
            if (distance_to_object(obj_Player) &lt; obj_Player.pickupRange){
                instance_destroy();
            }
        }
    }
    //Grenades
    if (distance_to_object(obj_Grenade) &lt; pickupRange){
        invAmount[2,1] += 1;
        with(obj_Grenade){
            if (distance_to_object(obj_Player) &lt; obj_Player.pickupRange){
                instance_destroy();
            }
        }
    }
    //Landmine
    if (distance_to_object(obj_LandMine) &lt; pickupRange){
        invAmount[2,2] += 1;
        with(obj_LandMine){
            if (distance_to_object(obj_Player) &lt; obj_Player.pickupRange){
                instance_destroy();
            }
        }
    }
}

///Shooting
//Check selected gun
if (invArraySelected[3] = 0){gunSelected = 1}
if (invArraySelected[3] = 1){gunSelected = 2}
if (invArraySelected[3] = 2){gunSelected = 3}
if (invArraySelected[3] = 3){gunSelected = 4}

//Check if gun is selected &amp; unlocked
if (invSelected = 3) &amp;&amp; gun[gunSelected+4,1,] = false{
    //Use guns
    if (mouse_check_button(mb_left)){
        if (gun[gunSelected,5] &gt; 0) &amp;&amp; (bulletDelay = 0) &amp;&amp; (reloadTime = 0){
            action_create_object_motion(obj_Bullet,x,y,10,global.faceDirection);
            bulletDelay = gun[gunSelected,3] * room_speed;
            gun[gunSelected,5] -= 1;
        }
    }
    
    //Reloading
    if (gun[gunSelected,5] = 0) &amp;&amp; (gun[gunSelected,6] &gt; 0) &amp;&amp; (reloadTime = 0){
        if (gun[gunSelected,6] &gt;= gun[gunSelected,1]){
            gun[gunSelected,5] += gun[gunSelected,1];
            gun[gunSelected,6] -= gun[gunSelected,1];
            reloadTime = gun[gunSelected,4] * room_speed;
        }else{
            if (gun[gunSelected,6] &lt; gun[gunSelected,1]){
                gun[gunSelected,5] = gun[gunSelected,6];
                gun[gunSelected,6] = 0;
                reloadTime = gun[gunSelected,4] * room_speed;
            }
        }
    }
    if (keyboard_check_pressed(ord('R'))) &amp;&amp; (gun[gunSelected,6]) &amp;&amp; (reloadTime = 0){
        transferAmount = gun[gunSelected,1] - gun[gunSelected,5];
        if (gun[gunSelected,6] &gt;= transferAmount){
            gun[gunSelected,5] += transferAmount;
            gun[gunSelected,6] -= transferAmount;
            reloadTime = gun[gunSelected,4] * room_speed;
        }else if (gun[gunSelected,6] &lt; transferAmount){
            gun[gunSelected,5] += gun[gunSelected,6];
            gun[gunSelected,6] = 0;
            reloadTime = gun[gunSelected,4] * room_speed;
        }
    }
}

//Make sure a ammo amount isn't too high
if (gun[gunSelected,6] &gt; gun[gunSelected,2]){
    gun[gunSelected,6] = gun[gunSelected,2];
}

//Count delay
if (bulletDelay &gt; 0){
    bulletDelay -= 1;
}

//Reload time
if (reloadTime &gt; 0){
    reloadTime -= 1;
}

//Melee
//Select weapon
if (invArraySelected[4] = 0){meleeSelected = 1;}
if (invArraySelected[4] = 1){meleeSelected = 2;}

if (mouse_check_button_pressed(mb_left)) &amp;&amp; (hitDelay = 0){
    if (invSelected = 4) &amp;&amp; (melee[meleeSelected,1] = true){
        if (distance_to_object(obj_Zombie_AI) &lt; hitRange){
            with(obj_Zombie_AI){
                if (distance_to_object(obj_Player) &lt; obj_Player.hitRange){
                    zHealth -= obj_Player.melee[obj_Player.meleeSelected,2];
                }
            }
            hitDelay = melee[meleeSelected,3] * room_speed;
        }
    }
}
if (hitDelay &gt; 0){
    hitDelay -= 1;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Depth correction
depth = y * -1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///GUI/HUD

//User input
cMain = 0

///Health, water, food, stamina
//Draw player sprite
draw_sprite_ext(spr_Player_Down,1,160,900,5,5,0,c_red,1);

//Healthbar
testHealth = 100
while (cMain &lt;= 32){
    if (pHealth &gt; testHealth){
        draw_sprite_part_ext(spr_Player_Down, 1, 0, 0, sprite_width, sprite_height-cMain+1, 79, 820, 5, 5, c_white, 1);
    }
    testHealth -= 3.125;
    cMain += 1;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Inventory
//Draw Main Inventory
//Draw slots
draw_sprite_ext(spr_InvSlot,0,1888-32,540-256,2,2,0,c_white,1);
draw_sprite_ext(spr_InvSlot,0,1888-32,540-128,2,2,0,c_white,1);
draw_sprite_ext(spr_InvSlot,0,1888-32,540,2,2,0,c_white,1);
draw_sprite_ext(spr_InvSlot,0,1888-32,540+128,2,2,0,c_white,1);
draw_sprite_ext(spr_InvSlot,0,1888-32,540+256,2,2,0,c_white,1);

//Set font
draw_set_font(fnt_ItemCount);

//Draw items &amp; amount in slots
//First array
if (invArraySelected[0] = 0){
    draw_sprite_ext(spr_Orange,0,1888-32,540-256,4,4,0,c_white,1);
    draw_text(1900,540-220,invAmount[0,1]);
}
if (invArraySelected[0] = 1){
    draw_sprite_ext(spr_Bread,0,1888-32,540-256,4,4,0,c_white,1);
    draw_text(1900,540-220,invAmount[0,2]);
}
if (invArraySelected[0] = 2){
    draw_sprite_ext(spr_Berries,0,1888-32,540-256,4,4,0,c_white,1);
    draw_text(1900,540-220,invAmount[0,3]);
}
if (invArraySelected[0] = 3){
    draw_sprite_ext(spr_Apple,0,1888-32,540-256,4,4,0,c_white,1);
    draw_text(1900,540-220,invAmount[0,4]);
}

//Second array
if (invArraySelected[1] = 0){
    draw_sprite_ext(spr_WaterBottle_Empty,0,1888-32,540-128,2,2,0,c_white,1);
    draw_text(1900,540-220+128,invAmount[1,1]);
}
if (invArraySelected[1] = 1){
    draw_sprite_ext(spr_WaterBottle_Full,0,1888-32,540-128,2,2,0,c_white,1);
    draw_text(1900,540-220+128,invAmount[1,2]);
}

//Third array
if (invArraySelected[2] = 0){
    draw_sprite_ext(spr_Grenade,0,1888-32,540,2,2,0,c_white,1);
    draw_text(1900,540-220+256,invAmount[2,1]);
}
if (invArraySelected[2] = 1){
    draw_sprite_ext(spr_LandMine,0,1888-32,540,3,3,0,c_white,1);
    draw_text(1900,540-220+256,invAmount[2,2]);
}
if (invArraySelected[2] = 2){
    draw_sprite_ext(spr_Battery,0,1888-32,540,3,3,0,c_white,1);
    draw_text(1900,540-220+256,invAmount[2,3]);
}

//Fourth array
//Set font
draw_set_font(fnt_ItemCount_Small);
draw_set_halign(fa_right);
if (invArraySelected[3] = 0){
    draw_sprite_ext(spr_HandGun,0,1888-32,540+128,2,2,0,c_white,1);
    draw_text(1900,540-220+384,string(gun[1,5]) + '/' + string(gun[1,6]));
}
if (invArraySelected[3] = 1){
    draw_sprite_ext(spr_ShotGun,0,1888-32,540+128,1,1,0,c_white,1);
    draw_text(1900,540-220+384,string(gun[2,5]) + '/' + string(gun[2,6]));
}
if (invArraySelected[3] = 2){
    draw_sprite_ext(spr_AK47,0,1888-32,540+128,1,1,0,c_white,1);
    draw_text(1900,540-220+384,string(gun[3,5]) + '/' + string(gun[3,6]));
}
if (invArraySelected[3] = 3){
    draw_sprite_ext(spr_LMG,0,1888-32,540+128,1,1,0,c_white,1);
    draw_text(1900,540-220+384,string(gun[4,5]) + '/' + string(gun[4,6]));
}
//Reset font
draw_set_font(fnt_ItemCount);
draw_set_halign(fa_center);

//Fifth array
if (invArraySelected[4] = 0){
    draw_sprite_ext(spr_FireAxe,0,1888-32,540+256,1.7,1.7,0,c_white,1);
}
if (invArraySelected[4] = 1){
    draw_sprite_ext(spr_CrowBar,0,1888-32,540+256,2,2,0,c_white,1);
}

//Draw feedback for slots
if (invSelected = 0){
    draw_sprite_ext(spr_InvFeedback,0,1888-32,540-256,2,2,0,c_white,1);
}
if (invSelected = 1){
    draw_sprite_ext(spr_InvFeedback,0,1888-32,540-128,2,2,0,c_white,1);
}
if (invSelected = 2){
    draw_sprite_ext(spr_InvFeedback,0,1888-32,540,2,2,0,c_white,1);
}
if (invSelected = 3){
    draw_sprite_ext(spr_InvFeedback,0,1888-32,540+128,2,2,0,c_white,1);
}
if (invSelected = 4){
    draw_sprite_ext(spr_InvFeedback,0,1888-32,540+256,2,2,0,c_white,1);
}

//Draw arrays
if (invExtended = true){
    //Draw first array
    if (invSelected = 0){
        //Draw slots
        draw_sprite_ext(spr_InvSlot,0,1888-32-128,540-256,2,2,0,c_white,1);
        draw_sprite_ext(spr_InvSlot,0,1888-32-256,540-256,2,2,0,c_white,1);
        draw_sprite_ext(spr_InvSlot,0,1888-32-384,540-256,2,2,0,c_white,1);
        draw_sprite_ext(spr_InvSlot,0,1888-32-512,540-256,2,2,0,c_white,1);
        
        //Draw items in slots
        draw_sprite_ext(spr_Apple,0,1888-32-128,540-256,4,4,0,c_white,1);
        draw_sprite_ext(spr_Berries,0,1888-32-256,540-256,4,4,0,c_white,1);
        draw_sprite_ext(spr_Bread,0,1888-32-384,540-256,4,4,0,c_white,1);
        draw_sprite_ext(spr_Orange,0,1888-32-512,540-256,4,4,0,c_white,1);
        
        //Draw amounts
        draw_text(1900-512,540-220,invAmount[0,1]);
        draw_text(1900-384,540-220,invAmount[0,2]);
        draw_text(1900-256,540-220,invAmount[0,3]);
        draw_text(1900-128,540-220,invAmount[0,4]);
        
        //Draw feedback
        if (invArraySelected[0] = 0){
            draw_sprite_ext(spr_InvFeedback2,0,1888-32-512,540-256,2,2,0,c_white,1);
        }
        if (invArraySelected[0] = 1){
            draw_sprite_ext(spr_InvFeedback2,0,1888-32-384,540-256,2,2,0,c_white,1);;
        }
        if (invArraySelected[0] = 2){
            draw_sprite_ext(spr_InvFeedback2,0,1888-32-256,540-256,2,2,0,c_white,1);;
        }
        if (invArraySelected[0] = 3){
            draw_sprite_ext(spr_InvFeedback2,0,1888-32-128,540-256,2,2,0,c_white,1);;
        }
    }
    //Draw second array
    if (invSelected = 1){
        //Draw slots
        draw_sprite_ext(spr_InvSlot,0,1888-32-128,540-128,2,2,0,c_white,1);
        draw_sprite_ext(spr_InvSlot,0,1888-32-256,540-128,2,2,0,c_white,1);
        
        //Draw items in slots
        draw_sprite_ext(spr_WaterBottle_Empty,0,1888-32-256,540-128,2,2,0,c_white,1);
        draw_sprite_ext(spr_WaterBottle_Full,0,1888-32-128,540-128,2,2,0,c_white,1);
        
        //Draw amounts
        draw_text(1900-256,540-220+128,invAmount[1,1]);
        draw_text(1900-128,540-220+128,invAmount[1,2]);
        
        //Draw feedback
        if (invArraySelected[1] = 0){
            draw_sprite_ext(spr_InvFeedback2,0,1888-32-256,540-128,2,2,0,c_white,1);
        }
        if (invArraySelected[1] = 1){
            draw_sprite_ext(spr_InvFeedback2,0,1888-32-128,540-128,2,2,0,c_white,1);
        }
    }
    //Draw third array
    if (invSelected = 2){
        //Draw slots
        draw_sprite_ext(spr_InvSlot,0,1888-32-128,540,2,2,0,c_white,1);
        draw_sprite_ext(spr_InvSlot,0,1888-32-256,540,2,2,0,c_white,1);
        draw_sprite_ext(spr_InvSlot,0,1888-32-384,540,2,2,0,c_white,1);
        
        //Draw items
        draw_sprite_ext(spr_Grenade,0,1888-32-384,540,2,2,0,c_white,1);
        draw_sprite_ext(spr_LandMine,0,1888-32-256,540,3,3,0,c_white,1);
        draw_sprite_ext(spr_Battery,0,1888-32-128,540,3,3,0,c_white,1);
        
        //Draw amounts
        draw_text(1900-384,540-220+256,invAmount[2,1]);
        draw_text(1900-256,540-220+256,invAmount[2,2]);
        draw_text(1900-128,540-220+256,invAmount[2,3]);
        
        //Draw feedback
        if (invArraySelected[2] = 0){
            draw_sprite_ext(spr_InvFeedback2,0,1888-32-384,540,2,2,0,c_white,1);
        }
        if (invArraySelected[2] = 1){
            draw_sprite_ext(spr_InvFeedback2,0,1888-32-256,540,2,2,0,c_white,1);
        }
        if (invArraySelected[2] = 2){
            draw_sprite_ext(spr_InvFeedback2,0,1888-32-128,540,2,2,0,c_white,1);
        }
    }
    //Draw fourth array
    if (invSelected = 3){
        //Draw slots
        draw_sprite_ext(spr_InvSlot,0,1888-32-128,540+128,2,2,0,c_white,1);
        draw_sprite_ext(spr_InvSlot,0,1888-32-256,540+128,2,2,0,c_white,1);
        draw_sprite_ext(spr_InvSlot,0,1888-32-384,540+128,2,2,0,c_white,1);
        draw_sprite_ext(spr_InvSlot,0,1888-32-512,540+128,2,2,0,c_white,1);
        
        //Draw items
        draw_sprite_ext(spr_HandGun,0,1888-32-512,540+128,2,2,0,c_white,1);
        draw_sprite_ext(spr_ShotGun,0,1888-32-384,540+128,1,1,0,c_white,1);
        draw_sprite_ext(spr_AK47,0,1888-32-256,540+128,1,1,0,c_white,1);
        draw_sprite_ext(spr_LMG,0,1888-32-128,540+128,1,1,0,c_white,1);
        
        //Draw ammo
        draw_set_font(fnt_ItemCount_Small);
        draw_set_halign(fa_right);
        draw_text(1900-512,540-220+384,string(gun[1,5]) + '/' + string(gun[1,6]));
        draw_text(1900-384,540-220+384,string(gun[2,5]) + '/' + string(gun[2,6]));
        draw_text(1900-256,540-220+384,string(gun[3,5]) + '/' + string(gun[3,6]));
        draw_text(1900-128,540-220+384,string(gun[4,5]) + '/' + string(gun[4,6]));
        draw_set_font(fnt_ItemCount);
        draw_set_halign(fa_center);
        //Draw feedback
        if (invArraySelected[3] = 0){
            draw_sprite_ext(spr_InvFeedback2,0,1888-32-512,540+128,2,2,0,c_white,1);
        }
        if (invArraySelected[3] = 1){
            draw_sprite_ext(spr_InvFeedback2,0,1888-32-384,540+128,2,2,0,c_white,1);
        }
        if (invArraySelected[3] = 2){
            draw_sprite_ext(spr_InvFeedback2,0,1888-32-256,540+128,2,2,0,c_white,1);
        }
        if (invArraySelected[3] = 3){
            draw_sprite_ext(spr_InvFeedback2,0,1888-32-128,540+128,2,2,0,c_white,1);
        }
    }
    //Draw fith array
    if (invSelected = 4){
        //Draw slots
        draw_sprite_ext(spr_InvSlot,0,1888-32-128,540+256,2,2,0,c_white,1);
        draw_sprite_ext(spr_InvSlot,0,1888-32-256,540+256,2,2,0,c_white,1);
        
        //Draw items
        draw_sprite_ext(spr_CrowBar,0,1888-32-128,540+256,2,2,0,c_white,1);
        draw_sprite_ext(spr_FireAxe,0,1888-32-256,540+256,1.7,1.7,0,c_white,1);
        
        //Draw feedback
        if (invArraySelected[4] = 0){
            draw_sprite_ext(spr_InvFeedback2,0,1888-32-256,540+256,2,2,0,c_white,1);
        }
        if (invArraySelected[4] = 1){
            draw_sprite_ext(spr_InvFeedback2,0,1888-32-128,540+256,2,2,0,c_white,1);
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>other</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw player &amp; guns
if (global.hide = false){
    draw_self();
    
    //Draw guns
    if (global.faceDirection = 0){
        direct = 0;
        hOffSet = gun[gunSelected,7];
        vOffSet = gun[gunSelected,8];
        canDraw = true;
    }
    if (global.faceDirection = 180){
        direct = 1;
        hOffSet = -gun[gunSelected,7];
        vOffSet = gun[gunSelected,8];
        canDraw = true;
    }
    if (global.faceDirection = 90 or global.faceDirection = 270){
        direct = 2;
        canDraw = false;
    }
    
    if (invSelected = 3) &amp;&amp; (canDraw = true) &amp;&amp; (gun[gunSelected+4,1] = true){
        if (invArraySelected[3] = 0){
                draw_sprite_ext(spr_HandGun,direct,x+hOffSet,y+vOffSet,0.25,0.25,0,c_white,1);
        }
        if (invArraySelected[3] = 1){
                draw_sprite_ext(spr_ShotGun,direct,x+hOffSet,y+vOffSet,0.25,0.25,0,c_white,1);
        }
        if (invArraySelected[3] = 2){
                draw_sprite_ext(spr_AK47,direct,x+hOffSet,y+vOffSet,0.25,0.25,0,c_white,1);
        }
        if (invArraySelected[3] = 3){
                draw_sprite_ext(spr_LMG,direct,x+hOffSet,y+vOffSet,0.25,0.25,0,c_white,1);
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///DEBUG DELETE WHEN COMPILING
draw_set_font(fnt_Instructions);
if (global.debug = true){
    draw_text(x,y+10,x);
    draw_text(x,y+20,y);
    draw_text(x,y+30,pWater);
    draw_text(x,y+40,pFood);
    draw_text(x,y+50,pHealth);
    draw_text(x,y+60,pStamina);
    draw_text(x,y+70,global.flashLightBattery);
    draw_text(x,y+80,global.size);
    draw_text(x,y+90,reloadTime);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>16,16</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
